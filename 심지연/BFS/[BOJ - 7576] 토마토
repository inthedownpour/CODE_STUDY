#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<vector>
#include<queue>

using namespace std;
#define x first
#define y second
int board[1002][1002];
int dist[1002][1002];
int n, m;
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

int main(void) {
	cin >> m >> n;

	queue<pair<int, int> > q;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> board[i][j];
			//입력된 익은 토마토의 위치를 입력 받음과 동시에 queue에 넣는다.
			if (board[i][j] == 1) {
				q.push({ i,j });
			}
			//익지 않은 토마토는 입력 받는 동시에 dist[i][j]에 -1로 저장.
			if (board[i][j] == 0) {
				dist[i][j] = -1;
			}
		}
	}


	//queue에 모든 수가 빠져나갈때까지(bfs가 끝나는 때) while문 돌리기
	while (!q.empty()) {
		auto cur = q.front();
		q.pop();

		for (int dir = 0; dir < 4; dir++) {
			int nx = cur.x + dx[dir];
			int ny = cur.y + dy[dir];
			//상자 외부로 좌표가 나가지 않는지 확인 하는 if문
			if (nx < 0 || nx >= n || ny < 0||ny >= m) continue;
			//만약에 익은 토마토면 지나가기
			if (dist[nx][ny] >= 0) continue;

			//하루 마다 익은 토마토의 앞,양옆, 뒤에 있던 안 익은 토마토가 다 익을 
			//기간을 구하기 위해 1씩 더한다.
			dist[nx][ny] = dist[cur.x][cur.y] + 1; 
			q.push({ nx,ny });
		}
	}

	int ans = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (dist[i][j] == -1) {
				cout << -1;
				return 0;
			}
			//dist에 저장된 수 중 가장 큰 수를 ans에 넣는다.
			ans = max(ans, dist[i][j]);
		}
	}

	cout << ans;
	return 0;
}
