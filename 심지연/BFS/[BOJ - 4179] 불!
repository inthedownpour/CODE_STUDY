//https://starlightbox.tistory.com/48 참고

#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<vector>
#include<queue>

using namespace std;
#define x first
#define y second
char board[1002][1002];//실제 지도 

int dist1[1002][1002]; // 불의 전파 시간(위치)
int dist2[1002][1002]; // 지훈 이동 시간(위치)
int n, m;
int dx[4] = { 1,0,-1,0 };//좌우
int dy[4] = { 0,1,0,-1 };//상하

queue<pair<int, int>> f;
queue<pair<int, int>> j;

void Fmove() {
	int cnt = f.size();

	for (int i = 0; i < cnt; i++) {
		pair<int, int> cur = f.front(); // 첫 위치에서 출발
		f.pop(); // 그 후 첫 위치 pop

		for (int dir = 0; dir < 4; dir++) {
			int nx = cur.x + dx[dir];
			int ny = cur.y + dy[dir];
			if (ny < 0 || nx < 0 || ny >= m || nx >= n) continue;
			if (board[nx][ny] != '.') continue;

			board[nx][ny] = 'F';
			f.push({ nx,ny });

		}
	}
}

int Smove() {
	int time = 0;
	while (!j.empty()) {
		time++;
		Fmove();

		int cnt = j.size();
		for (int i = 0; i < cnt; i++) {
			pair<int, int> cur = j.front();
			j.pop();

			for (int dir = 0; dir < 4; dir++) {
				int nx = cur.x + dx[dir];
				int ny = cur.y + dy[dir];

				if (nx < 0 || ny < 0 || nx >= n || ny >= m)
					return time;

				if (board[nx][ny] !='.') continue;

				board[nx][ny] = 'J';
				j.push({ nx,ny });
			}
		}
	}

	return -1;
}

int main(void) {

	cin >> m >> n;

	for (int i = 0; i < n; i++) {
		for (int k = 0; k < m; k++) {
			cin >> board[i][k];
			if (board[i][k] == 'J')
				j.push({ i,k }); // 불을 F로 정한다. 그 후 Q에 F가 적혀있는 공간의 좌표를 넣는다.
			else if (board[i][k] == 'F')
				f.push({ i,k });
		}
	}

	int time = Smove();
	if (time == -1) {
		cout << "IMPOSSIBLE" << endl;
	}
	else
		cout << time << endl;
	return 0;
}
