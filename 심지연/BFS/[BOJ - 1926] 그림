#include <iostream>
#include <queue>
using namespace std;

int n, m;
int map[501][501];
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

int BFS(int r, int c) {
	int sum = 1;
	queue<pair<int, int > > q;
	q.push({r, c});
	map[r][c] = 0;
	
	while(!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		
		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if(nx >= 0 && nx <= n && ny >= 0 && ny <= m && map[nx][ny] == 1) {
				q.push({nx, ny});
				map[nx][ny] = 0;
				sum++;
			}
		}
	}
	
	return sum;
}

int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	
	cin >> n >> m;
	for(int i = 0 ; i < n; i++) {
		for(int j = 0 ; j < m; j++) {
			cin >> map[i][j];
		}
	}
	
	int areaCnt = 0, areaSize = 0;
	for(int i = 0 ; i < n; i++) {
		for(int j = 0 ; j < m; j++) {
			if(map[i][j] == 1) {
				int tmp = BFS(i, j);
				areaSize = max(areaSize, tmp);
				areaCnt++;
			}
		}
	}
	
	cout << areaCnt << "\n" << areaSize;
}
