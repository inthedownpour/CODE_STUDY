const input = require('fs').readFileSync('/dev/stdin').toString();

const n = Number(input);
var dp = [[], new Array(10).fill(1)];
for(var i=2; i<=n; i++){
    dp[i] = [];
    dp[i][0] = dp[i-1][0] % 10007;
    for(var j=1; j<10; j++){
    	dp[i][j] = (dp[i][j-1] + dp[i-1][j]) % 10007;
    }
}
console.log(dp[n].reduce((a,v)=> a+v, 0) % 10007);

// 1자리수
//   0~9
// 2자리수
//   0 0~9
//   1 1~9
//   .
//   .
//   7 7~9
//   .
//   .
//   9 9~9
// 3자리수
//   0 0 0~9
//     1 1~9
//   .
//   5 7 7~9
//   .
//   .
//   9 9 9

// 2자리수 오르막 수인 7 7~9는 3자리수 오르막 수인 5 7 7~9를 만드는데도 사용되고 있습니다.
// 5 뿐만 아니라 7보다 작거나 같은 0~7까지 모두 7 7~9를 사용하고 있음을 알 수 있습니다.

// 즉, i자리수를 가지고 마지막 숫자가 j인 수의 오르막 수는 i-1자리수를 가지고
// 마지막 숫자가 j보다 작거나 같은 수의 오르막 수의 합으로 유추할 수 있습니다.

// dp[i][j] = dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + . . . + dp[i-1][j]